{"version":3,"sources":["stores/initialState.js","actions/actionTypes.js","reducers/index.js","stores/index.js","constants/index.js","actions/index.js","components/QuestionCard.js","components/QuizResult.js","components/QAContainer.js","App.js","index.js"],"names":["initialState","initialized","q_a","score","q_index","q_total","showScore","showNewQuestion","actionTypes","INIT_APP","RESET_APP","REQUEST_QA","RECEIVE_QA","NEW_QUESTION","SELECT_ANSWER","UPDATE_SCORE","SHOW_SCORE","ffReducer","state","arguments","length","undefined","action","console","log","type","RESET_QUIZ","Object","assign","qa","planets","results","slice","map","question","incorrect_answers","push","correct_answer","sort","store","createStore","reducer","applyMiddleware","thunk","ffConstants","API_URL","init_app","request_planets","receive_planets","data","initApp","dispatch","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","data_1","wrap","_context","prev","next","fetch","constants","sent","json","stop","_x","apply","this","QuestionCard","selectAnswer","index","_this","props","options","_this2","option","react_default","createElement","lib","onClick","bind","key","md","className","Heading","Body","React","Component","connect","QuizResult","QAContainer","handleResetBtnClick","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","loader","xs","mdOffset","react_spinners","sizeUnit","size","color","loading","fluid","components_QuizResult","components_QuestionCard","App","components_QAContainer","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.bd5cb8e8.chunk.js","sourcesContent":["const initialState = {\r\n    initialized: false,\r\n    q_a : [],\r\n    score : 0, \r\n    q_index: 1,\r\n    q_total: 0,\r\n    showScore: false,\r\n    showNewQuestion: true\r\n}\r\n\r\nexport default initialState;","const actionTypes = {\r\n    INIT_APP : 'INIT_APP',\r\n    RESET_APP : 'RESET_APP',\r\n    REQUEST_QA : \"REQUEST_QA\",\r\n    RECEIVE_QA : \"RECEIVE_QA\",\r\n    NEW_QUESTION : 'NEW_QUESTION',\r\n    SELECT_ANSWER : 'SELECT_ANSWER',\r\n    UPDATE_SCORE : 'UPDATE_SCORE',\r\n    SHOW_SCORE : 'SHOW_SCORE',\r\n\r\n}\r\n\r\nexport default actionTypes;","import initialState from '../stores/initialState';\r\nimport actionTypes from '../actions/actionTypes';\r\n\r\nconst ffReducer = (state = initialState, action) => {\r\n    console.log(action);\r\n    switch(action.type){\r\n        case actionTypes.RESET_QUIZ:\r\n            return Object.assign({}, state);\r\n\r\n        case actionTypes.INIT_APP:\r\n            return Object.assign({}, state);\r\n\r\n        case actionTypes.RECEIVE_QA:\r\n            let qa = action.planets.results.slice(0,action.planets.results.length);\r\n            qa = qa.map((question) => {\r\n                question.incorrect_answers.push(question.correct_answer);\r\n                question.incorrect_answers = question.incorrect_answers.sort();\r\n                return question;\r\n            });\r\n            return Object.assign({}, state, {q_a: action.planets.results, initialized: true, q_total: action.planets.results.length});\r\n\r\n        case actionTypes.UPDATE_SCORE:\r\n            console.log(Object.assign({}, state, {score: state.score + 1}));\r\n            return Object.assign({}, state, {score: state.score + 1});\r\n            return Object.assign({}, state, {q_a: action.planets.results, initialized: true, q_total: action.planets.results.length});\r\n\r\n        case actionTypes.SHOW_SCORE:\r\n            console.log(Object.assign({}, state, {showScore: true}));\r\n            return Object.assign({}, state, {showScore: true});\r\n\r\n        case actionTypes.NEW_QUESTION:\r\n            console.log(Object.assign({}, state, {q_index: state.q_index + 1, showNewQuestion: state.q_index < state.q_total - 2}));\r\n            return Object.assign({}, state, {q_index: state.q_index + 1, showNewQuestion: state.q_index < state.q_total - 2});\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default ffReducer;","import {createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from '../reducers';\r\n\r\nconst store = createStore(reducer,applyMiddleware(thunk));\r\n\r\nexport default store;","const ffConstants ={\r\n    API_URL: 'https://opentdb.com/api.php?amount=10&category=9&difficulty=easy&type=multiple',\r\n}\r\n\r\nexport default ffConstants;","import store from '../stores';\r\nimport actionTypes from '../actions/actionTypes';\r\nimport constants from '../constants';\r\n\r\nexport const init_app = () => {\r\n    return {\r\n        type: actionTypes.INIT_APP\r\n    }\r\n}\r\n\r\nexport const request_planets = () => {\r\n    return {\r\n        type: actionTypes.REQUEST_QA\r\n    }\r\n}\r\n\r\nexport const receive_planets = data => {\r\n    return {\r\n        type: actionTypes.RECEIVE_QA,\r\n        planets: data\r\n    }\r\n}\r\n\r\nexport function initApp(){\r\n    return dispatch => {\r\n        store.dispatch(init_app());\r\n        return dispatch(requestPlanets());\r\n    }\r\n}\r\n\r\nexport function requestPlanets(){\r\n    store.dispatch(request_planets());\r\n    return async dispatch => {\r\n        const data = await fetch(constants.API_URL);\r\n        const data_1 = await data.json();\r\n        dispatch(receive_planets(data_1));\r\n    }\r\n}","import React from 'react';\r\nimport {Panel, Col, ListGroup, ListGroupItem} from \"react-bootstrap/lib\";\r\nimport {connect} from 'react-redux';\r\n\r\nclass QuestionCard extends React.Component{\r\n  selectAnswer = (index) => {\r\n    if(this.props.options[index] == this.props.correct_answer)\r\n        this.props.dispatch({type:'UPDATE_SCORE'});\r\n        if(this.props.showNewQuestion)\r\n            this.props.dispatch({type:'NEW_QUESTION'});\r\n        else\r\n            this.props.dispatch({type:'SHOW_SCORE'});\r\n  }\r\n\r\n  render(){\r\n    let options = this.props.options.map( (option,index) =>\r\n        <ListGroupItem \r\n            onClick={this.selectAnswer.bind(this,index)}\r\n            key={index}\r\n        >\r\n            {option}\r\n        </ListGroupItem>\r\n    )\r\n    return(\r\n        <Col md={8} className={'col-md-offset-2'}>\r\n        <Panel>\r\n            <Panel.Heading className='text-center'>{this.props.question}</Panel.Heading>\r\n            <Panel.Body>\r\n                <ListGroup>\r\n                    {options}\r\n                </ListGroup>\r\n            </Panel.Body>\r\n        </Panel>\r\n        </Col>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect()(QuestionCard);","import React from 'react';\r\nimport {Panel, Col} from \"react-bootstrap/lib\";\r\n\r\nclass QuizResult extends React.Component{\r\n\r\n  render(){\r\n    return(\r\n        <Col md={8} className={'col-md-offset-2'}>\r\n        <Panel>\r\n            <Panel.Heading className='text-center'>{this.props.question}</Panel.Heading>\r\n            <Panel.Body>\r\n                Your score is {this.props.score}!\r\n            </Panel.Body>\r\n        </Panel>\r\n        </Col>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QuizResult;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Row, Grid, Col, PageHeader} from 'react-bootstrap/lib';\r\nimport {ClipLoader} from 'react-spinners';\r\nimport QuestionCard from './QuestionCard';\r\nimport QuizResult from './QuizResult';\r\n\r\nclass QAContainer extends React.Component{\r\n    handleResetBtnClick = () => {\r\n        this.props.dispatch({type:'RESET_QUIZ'});\r\n    }\r\n\r\n    shuffle = (array) => {\r\n      let currentIndex = array.length, temporaryValue, randomIndex;\r\n      while (0 !== currentIndex) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n      }\r\n      return array;\r\n    }\r\n\r\n    render(){\r\n        console.log(this.props.state);\r\n      //let question =  \r\n      const loader = (\r\n          <Col xs={12} md={10} mdOffset={1}>\r\n              <div className='loading sweet-loading'>\r\n                  <ClipLoader\r\n                  sizeUnit={\"px\"}\r\n                  size={150}\r\n                  color={'#123abc'}\r\n                  loading={true}\r\n                  />\r\n              </div> \r\n        </Col>\r\n      );\r\n\r\n        return(\r\n            <Grid fluid={true}>\r\n                <Row>\r\n                    <Col xs={12}>\r\n                    <PageHeader className=''>\r\n                            Eazy Quiz \r\n                            {\r\n                                !this.props.state.showScore ?\r\n                                <small className='pull-right'>Your Score: {this.props.state.score}</small>\r\n                                : ''\r\n                            }\r\n                    </PageHeader>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    { \r\n                        this.props.state.showScore ? <QuizResult score={this.props.state.score}/> : !this.props.state.initialized ? loader : <QuestionCard\r\n                            question = {this.props.state.q_a[this.props.state.q_index].question}\r\n                            correct_answer = {this.props.state.q_a[this.props.state.q_index].correct_answer}\r\n                            options = {this.props.state.q_a[this.props.state.q_index].incorrect_answers}\r\n                            showNewQuestion = {this.props.state.showNewQuestion}\r\n                            />\r\n                    }\r\n                </Row>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        state: state\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(QAContainer);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport {initApp} from './actions';\nimport QAContainer from './components/QAContainer';\n\nclass App extends Component {\n  componentDidMount() {\n      this.props.dispatch(initApp())\n  }\n\n  render() {\n    return (\n      <div className=\"app-root\">\n        <QAContainer/>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n    return{\n        state: state\n    }\n}\n\nexport default connect(mapStateToProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\n\nimport App from './App';\nimport store from './stores';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root')\n);\n"],"sourceRoot":""}